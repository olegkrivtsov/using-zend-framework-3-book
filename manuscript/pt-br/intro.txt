{mainmatter}

# Introdução ao Zend Framework 3 {#intro}

Neste capítulo, você aprenderá sobre o Zend Framework 3, seus princípios e seus componentes.

## O que é o Zend Framework 3??

PHP é uma linguagem popular de desenvolvimento de sites. No entanto, fazer sites em PHP puro é difícil.
Se você fizer uma aplicação web em PHP puro, você terá que organizar seu código de alguma forma, coletar
e validar a dados do usuário, implementar suporte de autenticação do usuário e controle de acesso, gerenciar banco de dados,
teste seu código e assim por diante.
À medida que seu site cresce em tamanho, fica cada vez mais difícil desenvolver
o código de maneira consistente. Cada desenvolvedor de sua equipe aplica sua codificação personalizada favorita
estilos e padrões. O código se torna supercomplicado, lento e difícil de suportar.
Você mescla o seu código em um único script gigante sem separação de interesses. Você tem que reinventar a roda
muitas vezes e isso causa problemas de segurança. Além disso, quando você muda para o desenvolvimento de um novo
site você notará que uma grande parte do código que você já escreveu para o site antigo
pode ser usado novamente com pequenas modificações. Este código pode ser separado
numa biblioteca. É assim que os frameworks aparecem.

I> Um framework é um tipo de biblioteca, de um software (também escrito em PHP)
Que fornecer aos desenvolvedores da Web a base de código e formas padronizadas e consistentes de criação
Para aplicativos da web.

Zend Framework 3 é um Framework de PHP open-source e Grátis.
Seu desenvolvimento é guiado (e patrocinado) pela Zend Technologies, que também é conhecida como a fornecedora da linguagem
PHP. A primeira versão (Zend Framework 1) foi lançada em 2007; Zend Framework 2, a segunda versão deste software,
foi lançado em setembro de 2012. Zend Framework 3 (ou brevemente ZF3) foi lançado em junho de 2016.

O Zend Framework 3 fornece os seguintes recursos:

* Desenvolva seu site muito mais rápido do que quando feito em PHP puro. ZF3 fornece
  muitos componentes e blibiotecas que podem ser usados ​​como base de código para criar seu site.

* Cooperação mais fácil com outros membros da equipe de criação de sites. Model-View-Controller (MVC)
  O padrão usado pelo ZF3 permite separar a lógica de negócios e a camada de apresentação do seu
  site, tornando sua estrutura consistente e sustentável.

* Escale seu site com o conceito de módulos(modules). ZF3 usa o termo * module *,
  permitindo separar partes dissociadas do site, permitindo assim a reutilização de modelos, visualizações,
  controladores e ativos do seu site em outros trabalhos.
  
* Acessando banco de dados com orientação a objeto. Em vez de interagir diretamente com o banco de dados
  usando consultas SQL, você pode usar o Object-Relational Mapping (ORM) do Doctrine para gerenciar
  estrutura e relacionamentos entre seus dados. Com o Doctrine você mapeia seu banco de dados
  tabela para uma classe PHP (também chamada de uma classe * entity *) e uma linha daquela tabela é
  mapeado para uma instância dessa classe. Doctrine permite resumo do tipo de banco de dados
  e tornar o código mais fácil de entender.
  
* Faça sites seguros com componentes fornecidos pelo ZF3, como
  filtros de entrada(input filters) e validadores(validators), algoritmos de criptografia,
   (Captcha) e Cross-Site Request Forgery (CSRF).


## Um exemplo de site PHP


Para demonstrar como é difícil escrever um site * sem * um framework, aqui nós
vamos escrever um site muito simples, composto por três páginas HTML: * Home *, * Login * e * Logout *.
Para este exemplo, não usaremos nenhuma estrutura e tentaremos usar apenas PHP "puro".

I> Não fique confuso - escrever um site com framework também pode ser difícil, mas
I> com um framework, você fará isso de maneira consistente e segura.
 
### Home Page

I> Quando você escreve um site em PHP, você coloca seu código em um arquivo com a extensão * .php *. Este arquivo é chamado
   um script PHP *.

Primeiro, vamos implementar a página * Home * do site. Para fazer isso, você deve criar o arquivo * index.php * no seu Apache ou
no seu diretório raiz e coloque o seguinte código:

T> Para entender o código abaixo, você precisa ter alguma experiência com PHP. Se você não tem experiência
T> com PHP, caso tenha duvidas ou necessite de algum tutorial de PHP,
T> recomendamos [w3schools.com](http://www.w3schools.com/php/).

{line-numbers=off,lang="php"}
~~~
<?php 
// index.php
session_start();

// If user is logged in, retrieve identity from session.
$identity = null;
if (isset($_SESSION['identity'])) {
    $identity = $_SESSION['identity'];
}
?>

<!DOCTYPE html>
<html>
    <head>
        <title>Home page</title>
    </head>
    <body>
        <h1>Home</h1>
        <?php if ($identity==null): ?>
        <a href="login.php">Sign in</a>
        <?php else: ?>
        <strong>Welcome, <?= $identity ?></strong> <a href="logout.php">Sign out</a>
        <?php endif; ?>
        
        <p>
            This is a simple website to demonstrate the advantages of a PHP framework
            and disadvantages of "pure" PHP.
        </p>
    </body>
</html>
~~~

Se você agora digitar "http: //localhost/index.php" no seu navegador (como Google Chrome ou Firefox),
deve ver a página como abaixo:

![Home page](images/intro/simple_home_page.png)

### Login Page

Em seguida, vamos implementar a página * Login *. Essa página teria um formulário com os campos * E-mail *
e * Senha * . Depois que o usuário envia o formulário, ele será autenticado e vamos salvar os seus dados na
na sessão do PHP. O Código ficaria:

{line-numbers=off,lang="php"}
~~~
<?php 
// login.php
session_start();

// If user is logged in, redirect him to index.php
if (isset($_SESSION['identity'])) {
    header('Location: index.php');
    exit;
}

// Check if form is submitted.
$submitted = false;
if ($_SERVER['REQUEST_METHOD']=='POST') {
    
    $submitted = true;
    
    // Extract form data.
    $email = $_POST['email'];
    $password = $_POST['password'];
    
    // Authenticate user.
    $authenticated = false;
    if ($email=='admin@example.com' && $password=='Secur1ty') {
        $authenticated = true;
        
        // Save identity to session.
        $_SESSION['identity'] = $email;
        
        // Redirect the user to index.php.
        header('Location: index.php');
        exit;
    }
}
?>

<!DOCTYPE html>
<html>
    <head>
        <title>Login page</title>
    </head>
    <body>
        <h1>Sign in</h1>
        <?php if ($submitted && !$authenticated): ?>
            <div class="alert">
                Invalid credentials.
            </div>
        <?php endif; ?>
        <form name="login-form" action="/login.php" method="POST">
            <label for="email">E-mail</label>
            <input type="text" name="email">
            <br>
            <label for="password">Password</label>
            <input type="password" name="password">
            <br>
            <input type="submit" name="submit" value="Sign In">
        </form>
    </body>
</html>
~~~

Se você abrir o URL "http: //localhost/login.php" em seu navegador, você vai ver algo como:

![Login page](images/intro/simple_login_page.png)

T> Para efetuar login, use o `admin@example.com` e `Secur1ty` como seu E-mail e senha, respectivamente.

### Logout Page

E finalmente, vamos implementar a página * Logout * que irá limpar os dados do usuário e da sessão:

{line-numbers=off,lang="php"}
~~~
<?php 
// logout.php
session_start();

unset($_SESSION['identity']);
header('Location: index.php');
exit;
~~~

T> O código completo deste site pode ser encontrado em
T> [Pure PHP](https://github.com/olegkrivtsov/using-zf3-book-samples/tree/master/purephp) exemplo está incluso com este livro.

### Revisando o Código

Os scripts acima não são apenas um exemplo típico de um site PHP "puro". É também um exemplo de
como você * não deve * escrever seus sites (mesmo sites simples). O que há de errado nisso?

1. Os scripts * index.php * e * login.php * tendem a juntar o código em um único arquivo.
   Você não tem nenhuma separação, o que torna o seu código muito complexo.
   Intuitivamente, você entende que seria
   porém é mais conveniente dividir o código responsável pela autenticação do usuário e o código
   responsável pela apresentação (renderização HTML).
   
2. As URLs das suas páginas parecem feias (por exemplo, "http: //localhost/index.php"). Nós seria melhor esconder
   essa extensão .php em tudo. E o que acontece quando um usuário da web tenta visitar uma página que não existe?
   Não seria melhor redirecionar o usuário para uma página de erro nesse caso.

3. E se este site aumentar de tamanho? Como você vai organizar o seu código? Um script PHP por página da web?
   E se você quiser reutilizar alguns dos seus scripts PHP em outros sites sem alterações? Intuitivamente
   Você pode entender que seria útil organizar o código em algum tipo de * módulos * reutilizáveis.
   
4. Os scripts * index.php * e * login.php * contêm HTML comum. Por que copiamos e colamos
   este layout comum em todos os scripts PHP? Não seria melhor reutilizar o mesmo layout padrão em todos
   (ou quase todas) as páginas.


5. O script * login.php * tem problemas de segurança, porque não implementamos nenhuma validação do ​​POST.
   A sessão do PHP também está sujeita a ataques hackers. E o script * login.php * PHP está localizado no
   diretório raiz do documento, o que não é muito seguro (seria melhor colocá-lo em um local não acessível
   para usuários da web). O * index.php * também é inseguro, porque nós não filtramos a saída do PHP (ele está sujeito a ataques XSS).

6. Esses scripts não usam classes PHP. Encapsulando funcionalidade em classes em teoria faria
   o código bem estruturado e fácil de  dar suporte.

7. Nesses scripts, você precisa escrever sua própria implementação de autenticação do usuário (e assim por diante).
   Em vez de reinventamos a roda por que não usar uma biblioteca bem projetada para isso?
 
Os problemas acima são facilmente resolvidos quando você escreve um site dentro de um framework (como o Zend Framework 3):


1. No ZF3, você usa o padrão de projeto * Model-View-Controller *, dividindo seu código PHP em models
   (o código responsável pela autenticação), views (o código responsável pela renderização de HTML)
   e controllers (o código responsável por recuperar as variáveis ​​do POST).

2. O sistema de rotas do  ZF3  permite deixar as URLS mais profissionais ocultando a extensões .php. Todas as URLS seguem regras
   estritas. Se um usuário tentar ver uma página não existente, ele será automaticamente
   redirecionado para uma página de erro padrão.

3.  No ZF3, você pode usar o conceito de * module *. Isso permite convenientemente separar seus  models, views and
   controllers em unidade autônoma (module) e reutilize facilmente essa unidade em outro projeto.
   
4. No ZF3, você pode definir um modelo padrão para visualização * layout * e reutilizá-lo em todas (ou na maioria) páginas da web.

5. O ZF3 fornece vários recursos de segurança, como filters e validators, criptografia
   algoritmos e assim por diante. Em um site da ZF3, apenas o * index.php * é acessível para usuários da web, todos os outros scripts PHP
   estão localizados fora do diretório raiz de documentos do Apache.

6. Em um site da ZF3, você coloca seu código em classes, o que o torna bem organizado.

7. O ZF3 fornece muitos componentes que você pode usar em seu site: existem componentes para autenticação, um componente
   para trabalhar com formulários e assim por diante.
  
T> Agora você pode ter alguma idéia das vantagens do Zend Framework 3 e do que ele pode fazer por você. Na próxima
   seções, descreveremos o ZF3 em mais detalhes.
  
## Licença


O Zend Framework 3 é licenciado sob licença do tipo BSD, permitindo que você o use em aplicativos comerciais e gratuitos.
Você pode até modificar o código da biblioteca e liberá-lo com outro nome.
A única coisa que você não pode fazer é remover o aviso de direitos autorais do código.
Se você usa o Zend Framework 3, também é recomendável mencionar isso na documentação do seu site ou na página Sobre.

Segue abaixo, a licença do Zend Framework 3:

{line-numbers=off,lang=text}
~~~
Copyright (c) 2005-2016, Zend Technologies USA, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions 
are met:

	* Redistributions of source code must retain the above copyright 
	  notice, this list of conditions and the following disclaimer.

	* Redistributions in binary form must reproduce the above copyright 
	  notice, this list of conditions and the following disclaimer in 
	  the documentation and/or other materials provided with the 
	  distribution.

	* Neither the name of Zend Technologies USA, Inc. nor the names of 
	  its contributors may be used to endorse or promote products 
	  derived from this software without specific prior written 
	  permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
~~~

## Suporte ao usuário


O suporte é uma coisa importante a considerar ao decidir se deve usar o framework como base para o seu site ou não.
O suporte deve inclui documentação bem escrita, webinars, fóruns da comunidade e (opcionalmente) serviços de suporte comercial,
como treinamentos e programas de certificação.

![Site Oficial do Projeto Zend Framework](images/intro/zend_framework_site.png)

*Documentação*. A documentação do Zend Framework está disponivel  [neste link] (https://framework.zend.com/learn).
Inclui o manual  utlização e tutoriais para progamadores iniciantes.

* API de Referência * pode ser encontrada  [neste link] (https://olegkrivtsov.github.io/zf3-api-reference/html/).

*Fórum*. Você pode fazer uma pergunta sobre a utilização do Zend Framework 3 no [StackOverflow] (https://stackoverflow.com/search?q=zend+framework+3).
Suas perguntas serão respondidas pela comunidade de desenvolvedores do ZF3.

* Webinars * são tutoriais em vídeo cp, vários recursos do Zend Framework. Lista completa de webinars
pode ser encontrado [neste link] (http://www.zend.com/en/resources/webinars/framework).

* Classes de treinamento * com instrutores ao vivo podem ser acessados ​​por
[nesse link] (http://www.zend.com/en/services/training).
Aqui você pode aprender o Zend Framework fazendo exercícios,
mini-projetos e desenvolvimento de código real.

* Programa de Certificação *. Permite que você se torne um Engenheiro Certificado Zend (ZCE),
tornando assim mais fácil melhorar as suas habilidades como arquiteto e encontrar um emprego em um
mercado de trabalho competitivo PHP. Certificações podem ser encontradas [aqui] (http://www.zend.com/en/services/certification).

* Quer mais recursos do ZF3? * Confira esta impressionante lista de [recursos do Zend Framework] (https://github.com/dignityinside/awesome-zf).

## Framework Source Code

O código-fonte do Zend Framework 3 é armazenado no GitHub [repositório] (https://github.com/zendframework).
Existe um repositório separado para cada componente ZF3.

I> Na maioria dos casos, você não precisará obter o código do Zend Framework 3 manualmente.
I> Em vez disso, você irá instalá-lo com o gerenciador de dependência do Composer. Nós iremos nos
I> familiarizar com o Composer posteriormente em um capítulo chamado [Zend Skeleton Application] (# skeleton).

### Padrões de Código

É uma boa prática introduzir algum padrão de código comum para  o seu código. Este padrão definiria a nomenclatura de classes
regras, regras de formatação de código, etc. O Zend Framework 3 define esse padrão [aqui] (https://github.com/zendframework/zendframework/wiki/Coding-Standards).
Todos os códigos no ZF3 segue as regras descritas nesse documento.

T> Se você planeja escrever um site baseado no ZF3, é recomendável seguir o mesmo padrão para o seu código. Isso vai
T> tornar seu código mais consistente e mais fácil de dar suporte a outras pessoas.

## Sistemas Operacionais Suportados

Como qualquer site em PHP, ou aplicativo da Web baseado em ZF3 pode funcionar em um servidor Linux ou em qualquer outro sistema operacional em que o PHP possa
funcionar. Para este livro, o autor usou o sistema operacional Ubuntu Linux.

Se você ainda não sabe qual SO usar para o seu desenvolvimento web, é
recomendado para você usar o Linux, porque a maioria dos servidores opera em servidores Linux.
Você pode consultar o [Apêndice A. Configurando o Ambiente de Desenvolvimento da Web] (# devenv)
para obter algumas instruções sobre como configurar seu ambiente de desenvolvimento.

## Requisitos do servidor

O Zend Framework 3 requer que seu servidor tenha a versão 5.6 do PHP (ou maior)
instaladada. Note que este é um requisito bastante estrito. Nem todos os hosts possuem essa versão do PHP.

Moreover, the recommended way of installing ZF3 (and other components 
your app depends on) is using [Composer](http://getcomposer.org/).
This forces the need of shell access (SSH) to be able
to execute Composer command-line tool. Some web hostings provide FTP access only, so
you won't be able to install a ZF3-based web app on such servers the usual way.

ZF3 utilizes URL rewriting extension for redirecting web-users to
entry script of your site (you have to enable Apache's `mod_rewrite` module.) 
You may also need to install some PHP extensions, like `memcached`. 
This can be a difficulty when using a shared web hosting 
and requires that you have admin rights on your server.

So, if you are planning to use ZF3 on a shared web hosting, think twice.
The best server to install ZF3 on is a server with the latest version of
PHP and with shell access to be able to execute Composer and install PHP extensions.

If your company manages its own server infrastructure and can afford
upgrading PHP version to the latest one, you can install ZF3 on your private server. 

An acceptable alternative is installing a ZF3-based web application to a 
cloud-based hosting service, like [Amazon Web Services](http://aws.amazon.com/). 
Amazon provides Linux server instances as a part of EC2 service. EC2 is rather
cheap, and it provides a [free usage tier](http://aws.amazon.com/free/) letting 
you try it for free for one year. We provide instructions for beginners on how to install a ZF3 website to Amazon EC2 cloud in
[Appendix E. Installing a ZF3 Web Application to Amazon EC2](#ec2-tutorial).

## Security

Zend Framework 3 follows best practices to provide you with a secure code base
for your web sites. ZF3 creators release security patches once the community of users
finds a problem. You can incorporate those fixes with a single command through Composer dependency 
manager.

I> Practice shows that using a framework for writing your website is more secure than using "pure"
I> PHP, because you don't need to reinvent the wheel. Most security vulnerabilities in frameworks
I> are already known and fixed by the community of users.

ZF3 provides the following features allowing to make your web site secure:

* *Entry Script* (*index.php*) is the only PHP file accessible to web visitors. All other PHP files
  are located outside of Apache document root. This is much more secure than allowing everyone to
  visit any of your PHP scripts.  

* *Routing* allows to define strict rules on how an acceptable page URL should look like.
  If a site user enters an invalid URL in a web browser's navigation bar,
  he/she is automatically redirected to an error page.

* *Access control lists (ACL)* and *Role-Based Access Control (RBAC)* allow to
  define flexible rules for granting or denying access to certain resources of 
  your web site. For example, an anonymous user would have access to your index
  page only, authenticated users would have access to their profile page, and
  the administrator user would have access to site management panel.
  
* *Form validators and filters* ensure that no unwanted data is collected
  through web forms. Filters, for example, allow to trim strings or strip HTML tags.
  Validators are used to check that the data that had been submitted through a form 
  conforms to certain rules. For example, E-mail validator checks that an E-mail field 
  contains valid E-mail address, and if not, raises an error forcing the site user to correct 
  the input error.

* *Captcha* and *CSRF* (Cross-Site Request Forgery) form elements are used for human checks
  and hacker attack prevention, respectively.

* *Zend\Escaper* component allows to strip unwanted HTML tags from data outputted to site pages.
  
* *Cryptography support* allows you to store your sensitive data (e.g. credentials) encrypted with
  strong crypt algorithms that are difficult to hack.

## Performance

ZF3 provides the following features to ensure its performance is acceptable: 

  * *Lazy class autoloading.* Classes are loaded once needed. 
    You don't have to write `require_once` for each class
    you want to load. Instead, the framework automatically discovers your classes 
    using the *autoloader* feature.

  * *Efficient service and plugin loading.* In ZF3, classes are instantiated
    only when they really need to. This is achieved through service manager 
    (the central container for services of your application).
  
  * *Support of caching.* PHP has several caching extensions (like Memcached) that
    can be used to speed-up ZF3-based websites. Caching saves frequently 
    used data to memory to speed-up data retrieval. 

## Design Patterns

Zend Framework 3 creators are big fans of various design patterns. Although
you don't have to understand patterns to read this book, this section is intended
to give you an idea of what design patterns ZF3 is based on.

* *Model-View-Controller (MVC) pattern*. Model-View-Controller pattern is used in all modern PHP
  frameworks. In an MVC-application you separate your code into three categories:
  models (your business logic go here), views (your presentation goes here) and
  controllers (code responsible for interaction with user goes here). This is also 
  called *the separation of concerns*. With MVC, you can *reuse* your components. It is also easy to substitute any part
  of this triad. For example, you can easily replace a view with another one, without
  changing your business logic. 
  
* *Domain Driven Design (DDD) pattern*. In Zend Framework 3, by convention, you will have model 
  layer further divided into *entities* (classes mapped on database tables), 
  *repositories* (classes used to retrieve entities from database),
  *value objects* (model classes not having identity),
  *services* (classes responsible for business logic).  
  
* *Aspect Oriented Design pattern.* In ZF3, everything is event-driven.
  When a site user requests a page, an *event* is generated (triggered). A listener (or observer) can
  catch event and do something with it. For example, @`Zend\Router` component
  parses the URL and determines what controller class to call. When the event finally reaches the page
  renderer, an HTTP response is generated and the user sees the web page.

* *Singleton pattern.* In ZF3, there is the service manager object which is the centralized
  container of all services available in the application. Each service exists in a single
  instance only. 

* *Strategy pattern.* A strategy is
  just a class encapsulating some algorithm. And you can use different algorithms based on 
  some condition. For example, the page renderer has several rendering strategies,
  making it possible to render web pages differently
  (the renderer can generate an HTML page, a JSON response, an RSS feed etc.)
  
* *Adapter pattern.* Adapters allow to adapt a generic class to concrete use case.
  For example, @`Zend\Db` component provides access to database in a generic way. 
  Internally, it uses adapters for each supported database (SQLite, MySQL, PostgreSQL and so on.)
  
* *Factory pattern.* You can create an instance of a class using the `new` operator. Or you can create it
  with a factory. A factory is just a class encapsulating creation of other objects. 
  Factories are useful, because they simplify dependency injection. Using factories also
  simplifies the testing of your model and controller classes.

## Main ZF3 Components

ZF3 developers believe that the framework should be a set of decoupled
components with minimum dependencies on each other. This is how ZF3 is 
organized. 

The idea was to let you use some selected ZF3 components alone,
even if you write your site with another framework. This becomes
even easier, keeping in mind that each component of ZF3 is a Composer-installable
package, so you can easily install any ZF3-component together with its dependencies through a single command.

There are several "main" ZF3 components that are used (either explicitly or implicitly) 
in almost any web application: 

  * @`Zend\EventManager` component allows to send events and register listeners to react to them. 
     
  * @`Zend\ModuleManager`. In ZF3, every application consists of modules and this component contains
     module loading functionality.                                                  

  * @`Zend\ServiceManager`.  This is the centralized registry of all services available in the application, 
     making it possible to access services from any point of the web site.
   
  * @`Zend\Http` provides an easy interface for performing Hyper-Text Transfer Protocol (HTTP) 
    requests.                              
     
  * @`Zend\Mvc`. Support of Model-View-Controller pattern and separation of business logic from 
    presentation. 

  * @`Zend\View`. Provides a system of helpers, output filters, and variable escaping. Used in 
    presentation layer.                      

  * @`Zend\Form`. Web form data collection, filtering, validation and rendering.  

  * @`Zend\InputFilter`. Provides an ability to define form data validation rules. 
    
  * @`Zend\Filter`. Provides a set of commonly used data filters, like string trimmer. 

  * @`Zend\Validator`. Provides a set of commonly used validators.  

## Differences with Zend Framework 2

For readers who have an experience in Zend Framework 2, in this section we'll
give some information on what has changed in Zend Framework 3.

Below, the main technical differences between ZF2 and ZF3 are presented:

### Backward Compatibility

ZF3 is an evolutionary release, so backward compatibility is preserved in most cases. However,
some migration work still has to be done if you used `ServiceLocatorAwareInterface` across your
code (which you probably did). In ZF3, this interface has been removed, and now all dependencies must be injected through
factories. So, you'll have to create factories for the most of your controllers, services, view helpers and
controller plugins. 

### Components

In ZF2, components were stored in a single GIT repository.
In ZF3, components are stored in multiple GIT repositories, one repository per component (for example, 
`zendframework/zend-mvc`, `zendframework/zend-servicemanager`, `zendframework/zend-form`, etc). 
This allows to develop and release components
independently of each other.

Components are even more decoupled than before and have minimum dependencies on each other. @`Zend\Mvc` component
has been divided into several ones. For example, routing functionality has been moved to new @`Zend\Router` component.

You are now recommended to specify individual component names your app depends on in `composer.json`, 
although it is still possible to depend on `zendframework/zendframework` package, which is a meta package 
installing *all* available components.

### Component Installer

In ZF3, a special Composer plugin called *component installer* was introduced. It allows to install 
components as ZF modules. It injects information about the component into the application configuration
file.

### ServiceManager and EventManager Performance

ZF3 developers did a great job improving performance of @`Zend\ServiceManager` and @`Zend\EventManager` components.
They are now about several times faster than before. The disadvantage is that you now have to do some migration
work to use the new functionality. Controller and service names are now recommended to utilize
the PHP 5.5 feature called `::class`. For example, if previously you registered your controller as `Application\Controller\Index`,
now you will register it as `IndexController::class`. If previously you registered service names as you wished,
now you are recommended to do that using `ServiceClassName::class`. Read the documentation for `Mvc`
component for additional information.

### PSR-4

In ZF2, the recommended directory structure was PSR-0, while in ZF3 it is PSR-4. This requires some
(small) migration work.

### Middleware 

Zend believes that the future of PHP is in middleware. "Middleware is, quite simply, code sitting between 
an incoming HTTP request, and the outgoing HTTP response." Now you can register a middleware listener
in an MVC application. 

### Focus on Documentation

Now each component repository contains its own documentation. Documentation is now in Markdown format 
and has become better designed.  
 
## Summary

A PHP framework is a library, giving you the code base and defining consistent ways of creating
web applications. Zend Framework 3 is a modern web development framework created by Zend Technologies,
the vendor of PHP language. It provides the developers
with outstanding capabilities for building scalable and secure web sites. ZF3 is licensed under BSD-like
license and can be used for free in both commercial and open-source applications.

